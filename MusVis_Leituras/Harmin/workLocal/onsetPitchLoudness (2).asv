function onsetList = onsetPitchLoudness(fileName, numRepetitions)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Author: Giordano Cabral
%% December, 2005
%% 
%% @fileName: name of the wave file
%% @onsetList: result of the computation, list of sample indexes defining
%% the beginning and ending of each segment
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

treshold = 0.1;

t1 = clock;
% step size is used to overlap frames
stepSize = 256;
% the size of the frame is X times the size of the step
multiple = 8;
frameSize = stepSize*multiple;
% the frame is zero padded into the "window", which is used in subsequent
% functions
%windowSize = 2048;
windowSize = frameSize;
hannWind = hann(frameSize)';
[b, fr, nb] = wavread(fileName);
% in the case the wav file has more than 1 channel
buff = b(:,1);

% in order to get a buffer which length is a multiple of the stepSize
newLength = ceil(length(buff)/stepSize)*stepSize;
paddedBuff = zeros(1, newLength);
paddedBuff(1:length(buff)) = buff;

firstFreq = fr/windowSize;
lastFreq = fr/2;
firstMidi=round(69+12 * log(abs(firstFreq)/440)/log(2));
lastMidi=round(69+12 * log(abs(lastFreq)/440)/log(2));

frequencies = fr/windowSize:fr/windowSize:fr/2;
midis = round(69+12 * log(abs(frequencies)/440)/log(2));
[pitch2fft, np, fft2pitch] = pitchIndexation(midis);
pgSize = length(pitch2fft);

fKHz = frequencies/1000;
AdB = -3.64 * (fKHz).^(-0.8) + 6.5 * exp(-0.6 * (fKHz - 3.3) .^2) - 0.001 * (fKHz.^4);
%barkIndexes = 13 * atan(0.00076 * frequencies) + 3.5 * atan ((frequencies / 7500) .^2);

pitchesDiff = [];
loudness = [];
% the "- multiple" is used to avoid index out of bounds
numFrames = (newLength/stepSize)-multiple;

% Computes pitchgram for first frame
window = zeros(1,windowSize);
frame = paddedBuff(1:frameSize).*hannWind;      
window(1:frameSize) = frame;
fftResult = fft(window);    
lastPowerSpectrum = abs(fftResult(1:length(window)/2)).^2;
lastPitchgram = zeros(1, pgSize);
for j=1:windowSize/2
    lastPitchgram(fft2pitch(j)) = lastPitchgram(fft2pitch(j)) + lastPowerSpectrum(j);
end
for k=1: pgSize
    lastPitchgram(k) = lastPitchgram(k) / np(k);
end    

% Computes loudness for first frame
frLoudness = 0;
for j=1:length(lastPowerSpectrum)
    frLoudness = frLoudness + lastPowerSpectrum(j)*lastPowerSpectrum(j);
end
loudness = [frLoudness];

window = zeros(1,windowSize);
for i=2:numFrames      
    frame = paddedBuff((i-1)*stepSize+1:(i-1)*stepSize+frameSize).*hannWind;      
    window(1:frameSize) = frame;
    pitchDiff = 0;
    fftResult = fft(window);    
    currentPowerSpectrum = abs(fftResult(1:windowSize/2)).^2;

    currentPitchgram = zeros(1, pgSize);
    for j=1:windowSize/2
        currentPitchgram(fft2pitch(j)) = currentPitchgram(fft2pitch(j)) + currentPowerSpectrum(j);
    end
    for k=1: pgSize
        currentPitchgram(k) = currentPitchgram(k) / np(k);
    end    

    pitchDiff = sum(abs(currentPitchgram - lastPitchgram));
    pitchesDiff = [pitchesDiff pitchDiff];
    lastPitchgram = currentPitchgram;
    
    frLoudness = 0;
    for j=1:length(currentPowerSpectrum)
        frLoudness = frLoudness + currentPowerSpectrum(j)*currentPowerSpectrum(j);
    end
    loudness = [loudness frLoudness];
end

%% temporal masking
n = floor(0.2*fr/stepSize);
w = hann(n*2+1);
h = w(n+1:n*2+1);
c = conv(loudness, h);
convLoudness = c(1:length(loudness));
for i=1:length(loudness)-1
    loudnessDiff(i) = c(i+1)-c(i);
end

%% smooth event detection function
n2 = floor(0.075*fr/stepSize);
h2 = hann(n2*2+1);
loudnessDiff = [loudnessDiff zeros(1, n2)];
c2L = conv(loudnessDiff, h2);
sedL = c2L(n2+1:length(loudnessDiff));
pitchesDiff = [pitchesDiff zeros(1, n2)];
c2P = conv(pitchesDiff, h2);
sedP = c2P(n2+1:length(pitchesDiff));

%% get peaks
maxL = max(sedL);
maxP = max(sedP);
tL = treshold*maxL;
tP = treshold*maxP;

peaksP = getPeaks(sedP, tP);
peaksToString(peaksP);
peaksP = filterPeaks(peaksP, n2*2);
peaksToString(peaksP);
peaksL = getPeaks(sedL, tL);
peaksToString(peaksL);

peaks = filterPeaks(sortPeaks(peaksL, peaksP), n2);
%peaks = mixPeaks(peaksL, peaksP);

pitchList = [];
numSegments = length(peaks)-1;
for i=1:numSegments
    beginCut = peaks(i).index*stepSize + 1;
    endCut = peaks(i+1).index*stepSize;
    frame = paddedBuff(beginCut:endCut);
    %newName = [fileName(1:length(fileName)-4), '_', num2str(i,'%03.0f'), ' byPitch.wav'];
    %wavwrite(frame,fr,nb,newName);        
    frSize = length(frame);
    wndSize = 2^(ceil(log2(frSize)));
    wnd = zeros(1, wndSize);
    wnd(1:frSize) = frame;
    frequencies = fr/wndSize:fr/wndSize:fr/2;
    fftResult = fft(wnd);    
    PSpectrum = abs(fftResult(1:wndSize/2));
    [amp, bin] = max(PSpectrum);
    freq = frequencies(bin);
    pitchList = [pitchList round(69+12 * log(abs(freq)/440)/log(2));];
end
disp(sprintf('%g',etime(clock,t1)));

%% find before-limit
begin_cuts = [];
%peaks = [1 peaks];
for i=2:length(peaks)
    found = false;
    curIndex = peaks(i);
    beginIndex = curIndex;
    while(~found && curIndex > peaks(i - 1))
        if (convLoudness(curIndex) < convLoudness(curIndex - 1))
            found = true;
        else
            if (convLoudness(curIndex) > convLoudness(curIndex - 1))
                beginIndex = curIndex;
            end
            curIndex = curIndex - 1;
        end
    end
    begin_cuts = [begin_cuts beginIndex];
end

% get valeys
minL = min(sed);
t = treshold*minL;
valeys = getValeys(sed, peaks(2:length(peaks)), t);

%% find after-limit
end_cuts = [];
valeys = [valeys length(convLoudness)];
for i=1:length(valeys)-1
    found = false;
    curIndex = valeys(i);
    endIndex = curIndex;
    while(~found && curIndex < valeys(i + 1))
        if (convLoudness(curIndex + 1) > convLoudness(curIndex))
            found = true;
        else
            if (convLoudness(curIndex + 1) < convLoudness(curIndex))
                endIndex = curIndex;
            end
            curIndex = curIndex + 1;
        end
    end
    end_cuts = [end_cuts endIndex];
end

%%cut silences
%silences = [];
%for i=2:length(begin_cuts)
%    found = false;
%    curIndex = begin_cuts(i);
%    while(~found && curIndex > begin_cuts(i - 1))%%    while(~found && curIndex > treshold) ???????
%        if (convLoudness(curIndex) > t)
%            found = true;
%        else
%            curIndex = curIndex - 1;
%        end
%    end
%    silences = [silences (curIndex - 1)];
%end

% get zero-crossings
for i=1:length(begin_cuts)-1
    found = false;
    crossed = false;
    curIndex = begin_cuts(i)*stepSize;
    while(~crossed && curIndex > 1)
        if (buff(curIndex) > 0 && buff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).begin = curIndex;
end
% VERIFICAR!!!!
for i=1:length(end_cuts)
    found = false;
    crossed = false;
    curIndex = end_cuts(i)*stepSize;
    while(~crossed && curIndex > 1)
        if (buff(curIndex) > 0 && buff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).end = curIndex;
end

disp(sprintf('%g',etime(clock,t1)));

numSegments = length(onsetList);
for i=1:numSegments
    newName = [fileName(1:length(fileName)-4), '_', num2str(i,'%03.0f'), ' PitchLoudness.wav'];
    wavwrite(paddedBuff(onsetList(i).begin:onsetList(i).end),fr,nb,newName);
    segments(i).buffer = paddedBuff(onsetList(i).begin:onsetList(i).end)';
end

shuffle = [];
if (nargin > 1)
    numRep = numRepetitions;
else
    numRep = numSegments;
end
for i=1:numRep
    r = randint(1,1,[1 numSegments]);
    shuffle = [shuffle; segments(r).buffer];
    newName = [fileName(1:length(fileName)-4), '_shuffled FFT.wav'];
    wavwrite(shuffle,fr,nb,newName);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function peaks=getPeaks(events, treshold)
peaks(1).index = 0;
peaks(1).amplit = 0;
j = 2;
for i=2:length(events)-1
    if(events(i) > events(i-1) && events(i) > events(i+1) && events(i) > treshold)
        peaks(j).index = i;
        peaks(j).amplit = events(i);
        j = j + 1;
    end
end
peaks(j).index = length(events) + 1;
peaks(j).amplit = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function outPeaks = filterPeaks(inPeaks, wndSize)
i = 1;
lastIndex = inPeaks(i).index;
lip = length(inPeaks);
while (i < lip)
    j = i + 1;
    curIndex = inPeaks(j).index;
    found = false;
    while ((curIndex - lastIndex ) < wndSize && ~found && j < lip)
        if (inPeaks(j).amplit > inPeaks(i).amplit)
            inPeaks(i).index = -1;
            lastIndex = curIndex;
            i = j;
            found = true;
        else
            inPeaks(j).index = -1;
            j = j + 1;
            curIndex = inPeaks(j).index;
        end
    end
    if(~found)
        i = j;
        lastIndex = curIndex;
    end
end

outPeaks = [];
for i=1:length(inPeaks)
    if(inPeaks(i).index ~= -1)
        outPeaks = [outPeaks inPeaks(i)];
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function peaksToString(peaks)
msg = [];
for i=1:length(peaks)
    msg = [msg (sprintf('%d ',peaks(i).index))];
end
disp(msg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function toString(array, format)
msg = [];
for i=1:length(array)
    msg = [msg (sprintf(format,array))];
end
disp(msg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function peaks = mixPeaks(p1, p2)
p = sort([p1 p2]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function peaks = sortPeaks(p1,p2)
indx = [getIndx(p1) getIndx(p2)];
amps = [getAmps(p1) getAmps(p2)];
[indx, sortIndexes] = sort(indx);
for i=1:length(indx)
    peaks(i).index = indx(i);
    peaks(i).amplit = amps(sortIndexes(i));
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function indx = getIndx(p)
indx = [];
for i=1:length(p)
    indx = [indx p(i).index];
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function amps = getAmps(p)
amps = [];
for i=1:length(p)
    amps = [amps p(i).amplit];
end
