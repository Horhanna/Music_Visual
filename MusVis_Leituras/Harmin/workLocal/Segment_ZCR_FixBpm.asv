function onsetList = Segment_ZCR_FixBpm(fileName, bpm, cutPoint, chordList)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Author: Giordano Cabral
%% November, 2006
%% 
%% @fileName: name of the wave file
%% @bpm: beats per minut of the song
%% @cutPoint: percentage of the beat where to place cut segments
%% @onsetList: result of the computation of auditory spectrogram
%%
%% 1. It divides the wave input into frames.
%% 2. It multiplies by the Hanning window
%% 3. Zero-padding
%% 4. Each frame is the result of previous steps, and is passed to the
%% ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global frequencies;
global fKHz;
treshold = 0.1;

t1 = clock;
% step size is used to overlap frames
stepSize = 128;
% the size of the frame is X times the size of the step
multiple = 4;
frameSize = stepSize*multiple;
% the frame is zero padded into the "window", which is used in subsequent
% functions
%windowSize = 2048;
windowSize = frameSize;
hannWind = hann(frameSize)';
[b, fr, nb] = wavread(fileName);
% in the case the wav file has more than 1 channel
buff = b(:,1);

% in order to get a buffer which length is a multiple of the stepSize
newLength = ceil(length(buff)/stepSize)*stepSize;
paddedBuff = zeros(1, newLength);
paddedBuff(1:length(buff)) = buff;

frequencies = fr/windowSize:fr/windowSize:fr/2;
fKHz = frequencies/1000;

loudness = [];
% the "- multiple" is used to avoid index out of bounds
numFrames = (newLength/stepSize)-multiple;
for i=1:numFrames      
    window = zeros(1,windowSize);
    frame = paddedBuff((i-1)*stepSize+1:(i-1)*stepSize+frameSize).*hannWind;      
    window(1:frameSize) = frame;
    frLoudness = 0;
    % @i0: audibility treshold 
    i0 = 60;
    %% 1. Converts fft coefficients into dB scale
    fftResult = fft(window);    
    powerSpectrum = abs(fftResult(1:length(window)/2));
    for j=1:length(powerSpectrum)
        frLoudness = frLoudness + powerSpectrum(j)*powerSpectrum(j);
    end
    loudness = [loudness frLoudness];
end

%% temporal masking
n = floor(0.2*fr/stepSize);
w = hann(n*2+1);
h = w(n+1:n*2+1);
c = conv(loudness, h);
convLoudness = c(1:length(loudness));

peaks = calcPeaks(length(chordList), (fr*60)/(bpm*stepSize), (frameSize/stepSize), cutPoint);

%% find before-limit
begin_cuts = [];
for i=2:length(peaks)
    found = false;
    curIndex = peaks(i);
    beginIndex = curIndex;
    while(~found && curIndex > peaks(i - 1))
        disp(curIndex);
        if (convLoudness(curIndex) < convLoudness(curIndex - 1))
            found = true;
        else
            if (convLoudness(curIndex) > convLoudness(curIndex - 1))
                beginIndex = curIndex;
            end
            curIndex = curIndex - 1;
        end
    end
    begin_cuts = [begin_cuts beginIndex];
end

% get zero-crossings
for i=1:length(begin_cuts)-1
    found = false;
    crossed = false;
    curIndex = begin_cuts(i)*stepSize;
    while(~crossed && curIndex > 1)
        if (buff(curIndex) > 0 && buff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).begin = curIndex;
end

disp(sprintf('%g',etime(clock,t1)));

% TODO: Write chord list with respective time

chordList onsetList

% numSegments = length(onsetList)-1;
% for i=1:numSegments
%     newName = [fileName(1:length(fileName)-4), '_', num2str(i,'%03.0f'), ' FFT.wav'];
%     %wavwrite(paddedBuff(onsetList(i).begin:onsetList(i+1).begin),fr,nb,newName);
%     segments(i).buffer = paddedBuff(onsetList(i).begin:onsetList(i+1).begin)';
% end
% 
% shuffle = [];
% numRep = numSegments;
% for i=1:numRep
%     r = randint(1,1,[1 numSegments]);
%     shuffle = [shuffle; segments(r).buffer];
%     newName = [fileName(1:length(fileName)-4), '_shuffled FFT.wav'];
%     wavwrite(shuffle,fr,nb,newName);
% end



function peaks=calcPeaks(numPeaks, spb, spf, cutPoint)
%% @spp: steps per beat
%% @spf: steps per frame
peaks = zeros(numPeaks+1, 1);
exactPeaks = zeros(numPeaks+1, 1);
peaks(1) = 1; % so peaks(i - 1) will be possible
exactPeaks(2) = cutPoint * spb - spf/2 + 1;
for i=3:numPeaks+1
    exactPeaks(i) = exactPeaks(i-1) + spb;
end
peaks = round(exactPeaks);