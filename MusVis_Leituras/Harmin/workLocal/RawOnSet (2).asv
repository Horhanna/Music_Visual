function peaks = RawOnSet(fileName)
t1 = now;
% step size is used to overlap frames
stepSize = 128;
% the size of the frame is X times the size of the step
multiple = 1;
frameSize = stepSize*multiple;
% the frame is zero padded into the "window", which is used in subsequent
% functions
windowSize = 128;
[b, fr, nb] = wavread(fileName);
buff = b(:,1);
lb = length(buff);
% in order to get a buffer which length is a multiple of the stepSize
newLength = ceil(length(buff)/stepSize)*stepSize;
paddedBuff = zeros(1, newLength);
paddedBuff(1:lb) = buff(:,1);

loudness = [];
% the "- multiple" is used to avoid index out of bounds
numFrames = (newLength/stepSize)-multiple
for i=1:numFrames      
    frame = paddedBuff((i-1)*stepSize+1:(i-1)*stepSize+frameSize);      
    frLoudness = abs(max(frame));
    loudness = [loudness; frLoudness];
end

maxL = max(loudness);
convSize = 0.15;
treshFactor = 0.1;
treshold = treshFactor * maxL;
% size of half-smooth window
shsw = round(convSize*fr/(2*stepSize));

%% temporal masking
%n = floor(0.2*fr/stepSize);
%w = hann(n*2+1);
%h = w(n+1:n*2+1)';
%c = conv(loudness, h);
%smoothedLoudness = c(1:length(loudness));

smoothedLoudness = zeros(numFrames,1);
for i=1:numFrames
    smoothedLoudness(i) = sum(loudness(max(1, i-2*shsw):min(numFrames, i),1));
end

maxSL = max(smoothedLoudness);
STreshold = treshFactor * maxSL;
%find peaks
peaks = [];
maxLoudness = zeros(numFrames,1);
for i=1:numFrames
    msl = max(smoothedLoudness(max(1, i-shsw):min(numFrames, i+shsw),1));
    if (msl > STreshold)
        if (smoothedLoudness(i) == msl)
            peaks = [peaks; i];
        end
        maxLoudness(i) = msl;
    else
        maxLoudness(i) = 0;
    end
end
%peaks = getPeaks(smoothedLoudness, STreshold);

%% find before-limits
begin_cuts = [];
peaks = [1; peaks];
for i=2:length(peaks)
    found = false;
    curIndex = peaks(i);
    beginIndex = curIndex;
    while(~found && curIndex > peaks(i - 1))
        if (maxLoudness(curIndex) < maxLoudness(curIndex - 1))
            found = true;
        else
            if (maxLoudness(curIndex) > maxLoudness(curIndex - 1))
                beginIndex = curIndex;
            end
            curIndex = curIndex - 1;
        end
    end
    begin_cuts = [begin_cuts; beginIndex];
end

%% find after-limits
end_cuts = [];
peaks = [peaks; numFrames];
for i=2:length(peaks)-1
    found = false;
    curIndex = peaks(i);
    endIndex = curIndex;
    while(~found && curIndex < peaks(i + 1))
        if (maxLoudness(curIndex + 1) > maxLoudness(curIndex))
            found = true;
        else
            if (maxLoudness(curIndex + 1) < maxLoudness(curIndex))
                endIndex = curIndex;
            end
            curIndex = curIndex + 1;
        end
    end
    end_cuts = [end_cuts; endIndex];
end

%maxLoudness = zeros(numFrames,1);
%for i=1:numFrames
%    maxLoudness(i) = max(smoothedLoudness(max(1, i-shsw):min(numFrames, i+shsw),1));
%end

%reSmoothedLoudness = zeros(numFrames,1);
%for i=1:numFrames
%    reSmoothedLoudness(i) = sum(smoothedLoudness(max(1, i-5):min(numFrames, i+5),1));
%end

subplot(4,1,1);
plot(paddedBuff);
title('Original wave');
axis([1 lb min(paddedBuff) max(paddedBuff)]);
subplot(4,1,2);
plot(loudness);
title('Loudness curve');
axis([1 numFrames min(loudness) max(loudness)]);
subplot(4,1,3);
plot(smoothedLoudness);
title('Smoothed loudness curve');
axis([1 numFrames min(smoothedLoudness) max(smoothedLoudness)]);
subplot(4,1,4);
plot(maxLoudness);
title('max loudness curve');
axis([1 numFrames min(maxLoudness) max(maxLoudness)]);

% get zero-crossings
for i=1:length(begin_cuts)
    found = false;
    crossed = false;
    curIndex = begin_cuts(i)*stepSize;
    while(~crossed && curIndex > 1)
        if (paddedBuff(curIndex) > 0 && paddedBuff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).begin = curIndex;
end
for i=1:length(end_cuts)
    found = false;
    crossed = false;
    curIndex = (end_cuts(i)-1)*stepSize+1;
    while(~crossed && curIndex < newLength)
        if (paddedBuff(curIndex) < 0 && paddedBuff(curIndex + 1) > 0)
            crossed = true;
        else
            curIndex = curIndex + 1;          
        end
    end
    onsetList(i).end = curIndex;
end

disp(sprintf('%g',now-t1));
numSegments = length(onsetList);
for i=1:numSegments
    newName = [fileName(1:length(fileName)-4), '_', num2str(i,'%03.0f'), ' Raw.wav'];
%    wavwrite(buff(onsetList(i).begin:onsetList(i).end),fr,nb,newName);
    segments(i).buffer = buff(onsetList(i).begin:onsetList(i).end);
end

shuffle = [];
if (nargin > 1)
    numRep = numRepetitions;
else
    numRep = numSegments;
end
for i=1:numRep
    r = randint(1,1,[1 numSegments]);
    shuffle = [shuffle; segments(r).buffer];
    newName = [fileName(1:length(fileName)-4), '_shuffled Raw.wav'];
    wavwrite(shuffle,fr,nb,newName);
end