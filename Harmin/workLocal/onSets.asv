function onsetList = onSets(fileName)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Author: Giordano Cabral
%% December, 2005
%% 
%% @fileName: name of the wave file
%% @auditoryModel: result of the computation of auditory spectrogram
%%
%% 1. It divides the wave input into frames.
%% 2. It multiplies by the Hanning window
%% 3. Zero-padding
%% 4. Each frame is the result of previous steps, and is passed to the
%% function barkSpectrogram, which computes a vector of intensities for
%% each bark band
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global frequencies;
global fKHz;
global AdB;
global barkIndexes;

% step size is used to overlap frames
stepSize = 128;
% the size of the frame is X times the size of the step
multiple = 4;
frameSize = stepSize*multiple;
% the frame is zero padded into the "window", which is used in subsequent
% functions
windowSize = 2048;
auditoryModel = zeros(0,24);
hannWind = hann(frameSize)';
[buff, fr, nb] = wavread(fileName);

% in order to get a buffer which length is a multiple of the stepSize
newLength = ceil(length(buff)/stepSize)*stepSize;
paddedBuff = zeros(1, newLength);
paddedBuff(1:length(buff)) = buff;

frequencies = fr/windowSize:fr/windowSize:fr/2;
fKHz = frequencies/1000;
AdB = -3.64 * (fKHz).^(-0.8) + 6.5 * exp(-0.6 * (fKHz - 3.3) .^2) - 0.001 * (fKHz.^4);
barkIndexes = 13 * atan(0.00076 * frequencies) + 3.5 * atan ((frequencies / 7500) .^2);

loudness = [];
% the "- multiple" is used to avoid index out of bounds
numFrames = (length(paddedBuff)/stepSize)-multiple
for i=1:numFrames      
    window = zeros(1,windowSize);
    frame = paddedBuff((i-1)*stepSize+1:(i-1)*stepSize+frameSize).*hannWind;      
    window(1:frameSize) = frame;
    frLoudness = 0;
    % @i0: audibility treshold 
    i0 = 60;
    %% 1. Converts fft coefficients into dB scale
    fftResult = fft(window);    
    powerSpectrum = abs(fftResult(1:length(window)/2));
    dbSpectrum = 20 * log10(powerSpectrum/i0);
    %% 2. Recomputes fft coefficients using transfer function
    finalSpectrum = AdB + dbSpectrum;
    %% 3. Clips values below 70 dB
    for j=1:length(finalSpectrum)
        if(finalSpectrum(j) < -70)
            finalSpectrum(j) = -70;
        end
        frLoudness = frLoudness + finalSpectrum(j) + 70;
    end      
    loudness = [loudness frLoudness];
    if(mod(i,100) == 0)
        disp(sprintf('i: %
        frLoudness
    end
end
%% temporal masking
n = floor(0.2*fr/stepSize);
w = hann(n*2+1);
h = w(n+1:n*2+1);
c = conv(loudness, h);
convLoudness = c(1:length(loudness));
for i=1:length(loudness)-1
    loudnessDiff(i) = c(i+1)-c(i);
end
%% smooth event detection function
n2 = floor(0.075*fr/stepSize);
h2 = hann(n2*2+1);
loudnessDiff = [loudnessDiff zeros(1, n2)];
c2 = conv(loudnessDiff, h2);
sed = c2(n2+1:length(loudnessDiff)+n2);
plot(sed);

%% get peaks
peaks = getPeaks(sed);
%% find valeys
cuts = [];
peaks = [1; peaks; length(convLoudness)];
for i=2:length(peaks)-1
    found = false;
    curIndex = peaks(i);
    while(~found && curIndex > peaks(i - 1))
        if (convLoudness(curIndex + 1) < convLoudness(curIndex))
            found = true;
        else
            curIndex = curIndex - 1;
        end
    end
    cuts = [cuts curIndex*stepSize];
end

%find silences
silences = [];
for i=3:length(peaks)
    found = false;
    curIndex = peaks(i);
    while(~found && curIndex > peaks(i - 1))
        if (convLoudness(curIndex) ~= 0)
            found = true;
        else
            curIndex = curIndex - 1;
        end
    end
    silences = [silences curIndex*stepSize];
end

% get zero-crossings
for i=1:length(cuts)
    found = false;
    crossed = false;
    curIndex = cuts(i);
    while(~crossed && curIndex > 1)
        if (buff(curIndex) > 0 && buff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).begin = curIndex;
end
for i=1:length(silences)
    found = false;
    crossed = false;
    curIndex = silences(i);
    while(~crossed && curIndex > 1)
        if (buff(curIndex) > 0 && buff(curIndex - 1) < 0)
            crossed = true;
        else
            curIndex = curIndex - 1;          
        end
    end
    onsetList(i).end = curIndex;
end

numSegments = length(onsetList);
for i=1:numSegments
    newName = [fileName(1:length(fileName)-4), num2str(i,'%02.g'), '.wav'];
    % wavwrite(buff(onsetList(i).begin:onsetList(i).end),fr,nb,newName);
    segments(i).buffer = buff(onsetList(i).begin:onsetList(i).end);
end

shuffle = [];
for i=1:numSegments  
    r = randint(1,1,[1 numSegments]);
    shuffle = [shuffle; segments(r).buffer];
    newName = [fileName(1:length(fileName)-4), '-shuffled.wav'];
    wavwrite(shuffle,fr,nb,newName);
end
