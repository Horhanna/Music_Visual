function [chrSimple, chrLinDist, chrExpDist] = wav2chr(FileName)
chrUniform = zeros(12,1);
chrDiscrete = zeros(12,1);
chrLinear = zeros(12,1);
chrAntiQuadratic = zeros(12,1);
chrExponential = zeros(12,1);
chrGaussian = zeros(12,1);

nci = zeros(12,1); %number of chroma instances
sdcd = zeros(12,1); %sum of discrete chroma distances
slcd = zeros(12,1); %sum of linear chroma distances
saqcd = zeros(12,1); %sum of antiquadratic chroma distances
secd = zeros(12,1); %sum of exponential chroma distances
sgcd = zeros(12,1); %sum of gaussian chroma distances
gw = gausswin(2001, 8); % gaussian window

[buf, fs, b] = wavread(FileName);
sp = abs(fft(buf));
sSpect = size(sp,1);
firstBin = ceil(100*sSpect*2/fs);
lastBin = floor(10000*sSpect*2/fs);
%factor = (2^(1/12)-1)/2;
%distMax = ((lastBin)*fs)/(sSpect*2)-((lastBin-1)*fs)/(sSpect*2);
for bin=firstBin:lastBin    
    hertz = ((bin)*fs)/(sSpect*2);
    exactMidi = 69+12 * log(abs(hertz)/440)/log(2);    
    midi=round(exactMidi);
    %distMax = (440 * exp ((ceil(exactMidi)-69) * log(2)/12))*factor;

    % Compute distance between frequency of bin and frequency of closest
    % note
    distanc = abs(exactMidi - midi)*2;
    
    % Compute weights
    linearW = (1 - distanc);                    % linear weight
    antiqW = (1 - distanc^2);                   % antiquadratic weight
    if (distanc > 0.2)                          % discrete weight
        discreteW = 0;
    else
        discreteW = 1;
    end
    expW = (100.^(1 - distanc))/100;            % exponential weight
    gaussInd = round((1 - distanc)*1000)+1001;
    gaussianW = gw(gaussInd);                   % gaussian weight
    
    chrBin = mod(midi-1, 12)+1;
    chrUniform(chrBin) = chrUniform(chrBin) + sp(bin);    
    chrLinear(chrBin) = chrLinear(chrBin) + sp(bin)*linearW;
    chrAntiQuadratic(chrBin) = chrAntiQuadratic(chrBin) + sp(bin)*antiqW;
    chrDiscrete(chrBin) = chrDiscrete(chrBin) + sp(bin)*discreteW;
    chrExponential(chrBin) = chrExponential(chrBin) + sp(bin)*expW;
    chrGaussian(chrBin) = chrGaussian(chrBin) + sp(bin)*gaussianW;
    
    slcd(chrBin) = slcd(chrBin) + linearW;
    sdcd(chrBin) = sdcd(chrBin) + discreteW;
    saqcd(chrBin) = saqcd(chrBin) + antiqW;
    secd(chrBin) = secd(chrBin) + expW;
    sgcd(chrBin) = sgcd(chrBin) + gaussianW;
    nci(chrBin) = nci(chrBin) + 1;
end

chrExponential = normalizeChroma(chrExponential, secd);

function normalizeChroma
cEDMax = 0;
cEDMin = inf;
for i=1:12
    if(secd(i)~=0)
        chrExpDist(i) = chrExpDist(i)/secd(i);
        if (chrExpDist(i) > cEDMax)
            cEDMax = chrExpDist(i);
        end
        if (chrExpDist(i) < cEDMin)
            cEDMin = chrExpDist(i);
        end
    end
end
for i=1:12
    chrExpDist(i) = (chrExpDist(i)-cEDMin)/(cEDMax-cEDMin);
end
cLDMax = 0;
cLDMin = inf;
for i=1:12
    if(slcd(i)~=0)
        chrLinDist(i) = chrLinDist(i)/slcd(i);
        if (chrLinDist(i) > cLDMax)
            cLDMax = chrLinDist(i);
        end
        if (chrLinDist(i) < cLDMin)
            cLDMin = chrLinDist(i);
        end
    end
end
for i=1:12
    chrLinDist(i) = (chrLinDist(i)-cLDMin)/(cLDMax-cLDMin);
end
cSMax = 0;
cSMin = inf;
for i=1:12
    if(nci(i)~=0)
        chrSimple(i) = chrSimple(i)/nci(i);
        if (chrSimple(i) > cSMax)
            cSMax = chrSimple(i);
        end
        if (chrSimple(i) < cSMin)
            cSMin = chrSimple(i);
        end
    end
end
for i=1:12
    chrSimple(i) = (chrSimple(i)-cSMin)/(cSMax-cSMin);
end